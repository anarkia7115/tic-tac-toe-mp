"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Component({
    properties: {},
    data: {
        state: {
            history: [
                {
                    squares: Array(9).fill(null)
                }
            ],
            stepNumber: 0,
            xIsNext: true,
        },
        moveDescs: [],
        status: "",
        squares: []
    },
    methods: {
        _setState: function (newState) {
            this.setData({ state: __assign(__assign({}, this.data.state), newState) });
        },
        handleSquareTap: function (e) {
            var i = e.detail.squareid;
            var history = this.data.state.history.slice(0, this.data.state.stepNumber + 1);
            var current = history[history.length - 1];
            var squares = current.squares.slice();
            if (this.calculateWinner(squares) || squares[i]) {
                return;
            }
            squares[i] = this.data.state.xIsNext ? "X" : "O";
            this._setState({
                history: history.concat([
                    {
                        squares: squares
                    }
                ]),
                stepNumber: history.length,
                xIsNext: !this.data.state.xIsNext
            });
        },
        jumpTo: function (e) {
            var step = e.target.dataset.step;
            this._setState({
                stepNumber: step,
                xIsNext: (step % 2) === 0
            });
        },
        calculateWinner: function (squares) {
            var lines = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6]
            ];
            for (var i = 0; i < lines.length; i++) {
                var _a = lines[i], a = _a[0], b = _a[1], c = _a[2];
                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
                    return squares[a];
                }
            }
            return null;
        }
    },
    observers: {
        "state.**": function () {
            var history = this.data.state.history;
            var current = history[this.data.state.stepNumber];
            var winner = this.calculateWinner(current.squares);
            var moveDescs = history.map(function (_, move) {
                var desc = move ?
                    'Go to move #' + move :
                    'Go to game start';
                return desc;
            });
            var status;
            if (winner) {
                status = "Winner: " + winner;
            }
            else {
                status = "Next player: " + (this.data.state.xIsNext ? "X" : "O");
            }
            var squares = current.squares;
            this.setData({
                moveDescs: moveDescs,
                status: status,
                squares: squares
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,